/*
  This file is part of Designar.
  
  Author: Alejandro Mujica (aledrums@gmail.com)
*/

export module Math;
import Types;

export namespace Designar
{
  constexpr real_t PI      = 3.1415926535897932384626433832795028841971693993751;
  constexpr real_t PI_2    = PI/2.;
  constexpr real_t PI_4    = PI/4.;
  constexpr real_t PI3_2   = 3.*PI/2.;
  constexpr real_t EPSILON = 1e-6;
  constexpr real_t INF     = std::numeric_limits<real_t>::infinity();

  enum class Sign { NEGATIVE, POSITIVE, ZERO };

  template <typename T>
  Sign sign(T);

  template <typename T>
  bool is_positive(T);

  template <typename T>
  bool is_negative(T);

  template <typename T>
  T abs(T);

  template <typename T>
  bool real_equal(T, T);

  template <typename T>
  bool num_equal(T, T);

  template <>
  bool num_equal<float>(float, float);
  
  template <>
  bool num_equal<double>(double, double);

  template <>
  bool num_equal<long double>(long double, long double);
  
  template <typename BT, typename ET>
  BT fast_integral_pow(BT, ET);

  template <typename BT, typename ET>
  BT pow(BT, ET);

  template <typename T>
  requires std::floating_point<T>
  T abs(T x)
  {
    return (x < T(0) ? -x : x);
  }

  template <typename T>
  requires std::floating_point<T>
  bool real_equal(T a, T b)
  {
    return abs(a-b) <= EPSILON;
  }

  template <typename T>
  requires std::integral<T>
  bool num_equal(T a, T b)
  {
    return a == b;
  }

  template <typename T>
  Sign sign(T n)
  {
    if (n < T(0))
      return Sign::NEGATIVE;
    else if (n > T(0))
      return Sign::POSITIVE;
    return Sign::ZERO;
  }

  template <typename T>
  bool is_positive(T n)
  {
    return sign(n) == Sign::POSITIVE;
  }

  template <typename T>
  bool is_negative(T n)
  {
    return sign(n) == Sign::NEGATIVE;
  }

  template <typename GenPoint2D>
  real_t area_of_parallelogram(const GenPoint2D & a,
			       const GenPoint2D & b,
			       const GenPoint2D & c)
  {
    return (b.get_x() - a.get_x()) * (c.get_y() - a.get_y()) -
      (c.get_x() - a.get_x()) * (b.get_y() - a.get_y());
  }
  
  template <typename BT, typename ET>
  requires std::integral<BT> && std::unsigned_integral<ET>
  BT fast_integral_pow(BT base, ET exp)
  {
    BT ret_val = BT(1);
    
    while (exp > ET(0))
      {
	if (exp & ET(1))
	  ret_val *= base;
	
	exp >>= 1;
	base *= base;
      }

    return ret_val;
  }

  template <typename BT, typename ET>
  struct FastIntegralPow
  {
    BT operator () (BT base, ET exp)
    {
      return fast_integral_pow(base, exp);
    }
  };

  template <typename BT, typename ET>
  struct StdPow
  {
    BT operator () (BT base, ET exp)
    {
      return std::pow(base, exp);
    }
  };

  template <typename BT, typename ET>
  BT pow(BT base, ET exp)
  {
    auto fct = typename std::conditional<std::is_integral<BT>::value and
					 std::is_integral<ET>::value and
					 std::is_unsigned<ET>::value,
					 FastIntegralPow<BT, ET>,
					 StdPow<BT, ET>>::type();
    return fct(base, exp);    
  }
 
} // end namespace Designar

module : private;

namespace Designar
{

  template <>
  bool num_equal<float>(float a, float b)
  {
    return real_equal(a, b);
  }

  template <>
  bool num_equal<double>(double a, double b)
  {
    return real_equal(a, b);
  }

  template <>
  bool num_equal<long double>(long double a, long double b)
  {
    return real_equal(a, b);
  }
  
} // end namespace Designar
