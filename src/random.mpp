/*
  This file is part of Designar.
  
  Author: Alejandro Mujica (aledrums@gmail.com)
*/
module;

export module Random;

import Types;

export namespace Designar
{

  constexpr int_t NUM_BITS               = 64;
  constexpr real_t DEFAULT_P              = 0.5;
  constexpr nat_t  DEFAULT_DICE_NUM_FACES = 6;

  rng_seed_t get_random_seed();

  real_t random(rng_t &);

  template <typename T>
  T random_uniform(rng_t &, T);

  template <typename T>
  T random_uniform(rng_t &, T, T);

  bool random_Bernoulli(rng_t &, real_t p = DEFAULT_P);

  nat_t random_binomial(rng_t &, nat_t, real_t p = DEFAULT_P);

  bool flip(rng_t &, real_t p = DEFAULT_P);

  nat_t throw_dice(rng_t &, nat_t num_faces = DEFAULT_DICE_NUM_FACES);

  template <typename T>
  requires arithmetic<T>
  T random_uniform(rng_t & rng, T max)
  {
    return random(rng) * max;
  }

  template <typename T>
  requires arithmetic<T>
  T random_uniform(rng_t & rng, T l, T r)
  {
    return random_uniform<T>(rng, r - l) + l;
  }
  
} // end namespace Designar

module : private;

namespace Designar
{
  rng_seed_t get_random_seed()
  {
    return std::chrono::system_clock::now().time_since_epoch().count() %
      rng_t::max();
  }

  real_t random(rng_t & rng)
  {
    return std::generate_canonical<real_t, NUM_BITS>(rng);
  }

  bool random_Bernoulli(rng_t & rng, real_t p)
  {
    return random(rng) < p;
  }

  nat_t random_binomial(rng_t & rng, nat_t n, real_t p)
  {
    return std::binomial_distribution<nat_t>(n, p)(rng);
  }

  bool flip(rng_t & rng, real_t p)
  {
    return random_Bernoulli(rng, p);
  }

  nat_t throw_dice(rng_t & rng, nat_t num_faces)
  {
    return random_uniform(rng, num_faces) + 1;
  }
};

